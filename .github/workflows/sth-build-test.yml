name: STH build and tests

on:
  pull_request:
    branches: [ release/*, main ]

jobs:
  analyze-code:
    name: Analyze the source code

    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: true
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --silent

      - name: Run Linter
        run: yarn lint

  build-docker-sth-image:
    name: Build sth docker image (Nodejs ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build sth Docker image
        run: docker build -q -t scramjetorg/sth:$(jq -r .version package.json) -f Dockerfile ../../
        working-directory: packages/sth

      - name: Export Docker images
        run: echo "$(docker images)" |awk '/scramjet/{print $1,$2,$3,$1}' |sed 's|/|_|2' | while read repo tag id name; do docker save $id -o dockerSthImg-$name-$tag-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar $repo:$tag ; done

      - name: Zip Docker images
        run: pigz docker*Img*.tar

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name:  dockerSthImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz
          path: '*.tar.gz'
          retention-days: 1

  build-docker-runner-image:
    name: Build runner docker image (Nodejs ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: build runner Docker image
        run: docker build -q -t scramjetorg/runner:$(jq -r .version package.json) -f Dockerfile ../../
        working-directory: packages/runner

      - name: Export Docker images
        run: echo "$(docker images)" |awk '/scramjet/{print $1,$2,$3,$1}' |sed 's|/|_|2' | while read repo tag id name; do docker save $id -o dockerRunnerImg-$name-$tag-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar $repo:$tag ; done

      - name: Zip Docker images
        run: pigz docker*Img*.tar

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name:  dockerRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz
          path: '*.tar.gz'
          retention-days: 1

  build-docker-pre-runner-image:
    name: Build pre-runner docker image (Nodejs ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build runner Docker image
        run: docker build -q -t scramjetorg/pre-runner:$(jq -r .version package.json) .
        working-directory: packages/pre-runner

      - name: Export Docker images
        run: echo "$(docker images)" |awk '/scramjet/{print $1,$2,$3,$1}' |sed 's|/|_|2' | while read repo tag id name; do docker save $id -o dockerPreRunnerImg-$name-$tag-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar $repo:$tag ; done

      - name: Zip Docker images
        run: pigz docker*Img*.tar

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name:  dockerPreRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz
          path: '*.tar.gz'
          retention-days: 1

  build-sth:
    name: Build STH (Nodejs ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --silent

      - name: Build packages
        run: yarn build:packages

      - name: Run packages tests
        run: yarn test:packages-no-concurrent

      - name: Create artifact
        run: tar --exclude=dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz --use-compress-program="pigz --best --recursive" -cf dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz dist/.*

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz
          path: dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz
          retention-days: 1

  build-refapps:
    name: Build STH refapps (Nodejs ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --silent

      - name: Build refapps
        run: yarn build:refapps

      - name: Pack sequences
        run: yarn packseq

      - name: Create artifact
        run: tar --exclude=dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz --use-compress-program="pigz --best --recursive" -cf dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz dist/.*

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz
          path: dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz
          retention-days: 1

  test-bdd-ci-no-host-sth:
    name: Test bdd-ci-no-host STH (Nodejs ${{ matrix.node-version }})
    needs: [analyze-code, build-sth, build-refapps, build-docker-sth-image, build-docker-runner-image, build-docker-pre-runner-image]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: yarn install --frozen-lockfile --silent

      - name: Download dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact 
        uses: actions/download-artifact@v2
        with:
          name: dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

      - name: Download dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact 
        uses: actions/download-artifact@v2
        with:
          name: dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

      - name: Download dockerSthImg artifact 
        uses: actions/download-artifact@v2
        with:
          name: dockerSthImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Download dockerImg artifact 
        uses: actions/download-artifact@v2
        with:
          name: dockerRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Download dockerPreRunnerImg artifact 
        uses: actions/download-artifact@v2
        with:
          name: dockerPreRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Unzip dockerImg-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        run: pigz -d docker*Img*.tar.gz

      - name: Unzip dist-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        run: ls dist*tar.gz |xargs -n1 tar -I pigz -xf

      - name: Load Docker images
        run: ls -1  docker*Img*.tar| while read line; do docker load -i $line; done

      - name: Setup Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run BDD for HUB params
        run: SCRAMJET_TEST_LOG=1 yarn test:bdd-ci-no-host

  test-bdd-ci-sth:
    name: Test bdd-ci STH (Nodejs ${{ matrix.node-version }})
    needs: [analyze-code, build-sth, build-refapps, build-docker-sth-image, build-docker-runner-image, build-docker-pre-runner-image]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: yarn install --frozen-lockfile --silent

      - name: Download dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact 
        uses: actions/download-artifact@v2
        with:
          name: dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

      - name: Download dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact 
        uses: actions/download-artifact@v2
        with:
          name: dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

      - name: Download dockerSthImg artifact 
        uses: actions/download-artifact@v2
        with:
          name: dockerSthImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Download dockerImg artifact 
        uses: actions/download-artifact@v2
        with:
          name: dockerRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Download dockerPreRunnerImg artifact 
        uses: actions/download-artifact@v2
        with:
          name: dockerPreRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Unzip dockerImg-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        run: pigz -d docker*Img*.tar.gz

      - name: Unzip dist-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        run: ls dist*tar.gz |xargs -n1 tar -I pigz -xf

      - name: Load Docker images
        run: ls -1  docker*Img*.tar| while read line; do docker load -i $line; done

      - name: Setup Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run BDD tests
        run: SCRAMJET_TEST_LOG=1 yarn test:bdd-ci

  test-bdd-ci-no-host-no-docker-sth:
    name: Test bdd-ci-no-host-no-docker STH (Nodejs ${{ matrix.node-version }})
    needs: [analyze-code, build-sth, build-refapps, build-docker-sth-image, build-docker-runner-image, build-docker-pre-runner-image]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: yarn install --frozen-lockfile --silent

      - name: Download dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact 
        uses: actions/download-artifact@v2
        with:
          name: dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

      - name: Download dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact 
        uses: actions/download-artifact@v2
        with:
          name: dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

      - name: Download dockerSthImg artifact 
        uses: actions/download-artifact@v2
        with:
          name: dockerSthImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Download dockerImg artifact 
        uses: actions/download-artifact@v2
        with:
          name: dockerRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Download dockerPreRunnerImg artifact 
        uses: actions/download-artifact@v2
        with:
          name: dockerPreRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Unzip dockerImg-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        run: pigz -d docker*Img*.tar.gz

      - name: Unzip dist-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        run: ls dist*tar.gz |xargs -n1 tar -I pigz -xf

      - name: Load Docker images
        run: ls -1  docker*Img*.tar| while read line; do docker load -i $line; done

      - name: Setup Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run BDD for HUB params
        run: NO_DOCKER=1 SCRAMJET_TEST_LOG=1 yarn test:bdd-ci-no-host


  test-bdd-ci-sth-no-docker:
      name: Test bdd-ci-no-docker STH (Nodejs ${{ matrix.node-version }})
      needs: [analyze-code, build-sth, build-refapps, build-docker-sth-image, build-docker-runner-image, build-docker-pre-runner-image]
      runs-on: ubuntu-latest
      timeout-minutes: 20

      strategy:
        fail-fast: true
        matrix:
          node-version: [14.x, 16.x]

      steps:
        - uses: actions/checkout@v2

        - name: Install dependencies
          run: yarn install --frozen-lockfile --silent

        - name: Download dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact 
          uses: actions/download-artifact@v2
          with:
            name: dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

        - name: Download dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact 
          uses: actions/download-artifact@v2
          with:
            name: dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

        - name: Download dockerSthImg artifact 
          uses: actions/download-artifact@v2
          with:
            name: dockerSthImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

        - name: Download dockerImg artifact 
          uses: actions/download-artifact@v2
          with:
            name: dockerRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

        - name: Download dockerPreRunnerImg artifact 
          uses: actions/download-artifact@v2
          with:
            name: dockerPreRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

        - name: Unzip dockerImg-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
          run: pigz -d docker*Img*.tar.gz

        - name: Unzip dist-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
          run: ls dist*tar.gz |xargs -n1 tar -I pigz -xf

        - name: Load Docker images
          run: ls -1  docker*Img*.tar| while read line; do docker load -i $line; done

        - name: Setup Nodejs ${{ matrix.node-version }}
          uses: actions/setup-node@v2
          with:
            node-version: ${{ matrix.node-version }}

        - name: Run BDD tests
          run: NO_DOCKER=1 SCRAMJET_TEST_LOG=1 yarn test:bdd-ci

