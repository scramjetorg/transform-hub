name: STH build and tests

on:
  pull_request:
    branches: [ release/*, main, devel ]

jobs:
  preinstall-deps:
    uses: ./.github/workflows/preinstall-deps.yml

  analyze-code:
    needs: [preinstall-deps]
    uses: ./.github/workflows/analyze-code.yml

  build-docker-sth-image:
    needs: [preinstall-deps]
    uses: ./.github/workflows/build-docker-sth.yml

  build-docker-runner-image:
    needs: [preinstall-deps]
    uses: ./.github/workflows/build-docker-runner-node.yml

  build-docker-runner-py-image:
    needs: [preinstall-deps]
    uses: ./.github/workflows/build-docker-runner-python.yml

  build-docker-pre-runner-image:
    needs: [preinstall-deps]
    uses: ./.github/workflows/build-docker-prerunner.yml

  build-sth:
    needs: [preinstall-deps]
    uses: ./.github/workflows/build-docker-sth.yml

  build-refapps:
    needs: [preinstall-deps]
    uses: ./.github/workflows/build-refapps.yml

  test-bdd-ci-no-host-sth:
    name: Test bdd-ci-no-host STH (Nodejs ${{ matrix.node-version }})
    needs: [analyze-code, build-sth, build-refapps, build-docker-sth-image, build-docker-runner-image, build-docker-pre-runner-image]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline --silent

      - name: Download dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

      - name: Download reference apps (latest release)
        run: gh release download --repo scramjetorg/reference-apps --pattern '*.tar.gz' --dir packages/reference-apps
        env:
          GITHUB_TOKEN: ${{ secrets.SCRAMJET_BOT_TOKEN }}

      # some refapps are tightly coupled with BDD tests and "Download reference apps" is not enough
      - name: Download dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

      - name: Download dockerSthImg artifact
        uses: actions/download-artifact@v2
        with:
          name: dockerSthImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Download dockerImg artifact
        uses: actions/download-artifact@v2
        with:
          name: dockerRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Download dockerPreRunnerImg artifact
        uses: actions/download-artifact@v2
        with:
          name: dockerPreRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Unzip dockerImg-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        run: pigz -d docker*Img*.tar.gz

      - name: Unzip dist-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        run: ls dist*tar.gz |xargs -n1 tar -I pigz -xf

      - name: Load Docker images
        run: ls -1  docker*Img*.tar| while read line; do docker load -i $line; done

      - name: Setup Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run BDD for HUB params
        run: SCRAMJET_TEST_LOG=1 yarn test:bdd-ci-no-host

  test-bdd-ci-sth:
    name: Test bdd-ci STH (Nodejs ${{ matrix.node-version }})
    needs: [analyze-code, build-sth, build-refapps, build-docker-sth-image, build-docker-runner-image, build-docker-runner-py-image, build-docker-pre-runner-image]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        node-version: [14.x, 16.x]
        python-version: ['3.9']

    steps:
      - uses: actions/checkout@v3

      - name: Download dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

      - name: Download reference apps (latest release)
        run: gh release download --repo scramjetorg/reference-apps --pattern '*.tar.gz' --dir packages/reference-apps
        env:
          GITHUB_TOKEN: ${{ secrets.SCRAMJET_BOT_TOKEN }}

      # some refapps are tightly coupled with BDD tests and "Download reference apps" is not enough
      - name: Download dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

      - name: Download dockerSthImg artifact
        uses: actions/download-artifact@v2
        with:
          name: dockerSthImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Download dockerImg artifact
        uses: actions/download-artifact@v2
        with:
          name: dockerRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Download dockerImg artifact
        uses: actions/download-artifact@v2
        with:
          name: dockerRunnerPyImg-${{ matrix.python-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Download dockerPreRunnerImg artifact
        uses: actions/download-artifact@v2
        with:
          name: dockerPreRunnerImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Unzip dockerImg-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        run: pigz -d docker*Img*.tar.gz

      - name: Unzip dist-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        run: ls dist*tar.gz |xargs -n1 tar -I pigz -xf

      - name: Load Docker images
        run: ls -1  docker*Img*.tar| while read line; do docker load -i $line; done

      - name: Setup Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline --silent

      - name: Run BDD tests
      # SCRAMJET_SPAWN_JS will run cli test from dist directory
        run: SCRAMJET_TEST_LOG=1 SCRAMJET_SPAWN_JS=1 yarn test:bdd-ci

      - name: Run BDD Python Api-Client tests
        run: yarn test:bdd-ci-py

  test-bdd-ci-no-host-no-docker-sth:
    name: Test bdd-ci-no-host-no-docker STH (Nodejs ${{ matrix.node-version }})
    needs: [analyze-code, build-sth, build-refapps, build-docker-sth-image]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v3

      - name: Download dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

      - name: Download reference apps (latest release)
        run: gh release download --repo scramjetorg/reference-apps --pattern '*.tar.gz' --dir packages/reference-apps
        env:
          GITHUB_TOKEN: ${{ secrets.SCRAMJET_BOT_TOKEN }}

      # some refapps are tightly coupled with BDD tests and "Download reference apps" is not enough
      - name: Download dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

      - name: Download dockerSthImg artifact
        uses: actions/download-artifact@v2
        with:
          name: dockerSthImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Unzip dockerImg-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        run: pigz -d dockerSthImg-scramjetorg_sth-$(jq -r .version package.json)-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

      - name: Unzip dist-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
        run: ls dist*tar.gz |xargs -n1 tar -I pigz -xf

      - name: Load Docker images
        run: docker load -i dockerSthImg-scramjetorg_sth-$(jq -r .version package.json)-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar

      - name: Setup Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline --silent

      - name: Run BDD for HUB params
        run: SCRAMJET_TEST_LOG=1 yarn test:bdd-ci-no-host-no-docker

  test-bdd-ci-sth-no-docker:
      name: Test bdd-ci-no-docker STH (Nodejs ${{ matrix.node-version }})
      needs: [analyze-code, build-sth, build-refapps, build-docker-sth-image]
      runs-on: ubuntu-latest
      timeout-minutes: 20

      strategy:
        fail-fast: true
        matrix:
          node-version: [14.x, 16.x]

      steps:
        - uses: actions/checkout@v3

        - name: Download dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
          uses: actions/download-artifact@v2
          with:
            name: dist-sth-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

        - name: Download reference apps (latest release)
          run: gh release download --repo scramjetorg/reference-apps --pattern '*.tar.gz' --dir packages/reference-apps
          env:
            GITHUB_TOKEN: ${{ secrets.SCRAMJET_BOT_TOKEN }}

        # some refapps are tightly coupled with BDD tests and "Download reference apps" is not enough
        - name: Download dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
          uses: actions/download-artifact@v2
          with:
            name: dist-refapps-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz

        - name: Download dockerSthImg artifact
          uses: actions/download-artifact@v2
          with:
            name: dockerSthImg-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

        - name: Unzip dockerImg-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
          run: pigz -d dockerSthImg-scramjetorg_sth-$(jq -r .version package.json)-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar.gz

        - name: Unzip dist-${{ github.event.pull_request.head.sha }}-${{ matrix.node-version }}.tar.gz artifact
          run: ls dist*tar.gz |xargs -n1 tar -I pigz -xf

        - name: Load Docker images
          run: docker load -i dockerSthImg-scramjetorg_sth-$(jq -r .version package.json)-${{ matrix.node-version }}-${{ github.event.pull_request.head.sha }}.tar

        - name: Setup Nodejs ${{ matrix.node-version }}
          uses: actions/setup-node@v2
          with:
            node-version: ${{ matrix.node-version }}

        - name: Install dependencies
          run: yarn install --frozen-lockfile --prefer-offline --silent

        - name: Run BDD tests
          run: SCRAMJET_TEST_LOG=1 yarn test:bdd-ci-no-docker

  trigger-compatibility-test:
    name: STH-CPM compatibility test (from platform-tests)
    runs-on: ubuntu-latest
    steps:
      - uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: scramjetorg
          repo: platform-tests
          github_token: ${{ secrets.SCRAMJET_BOT_TOKEN }}
          github_user: ${{ secrets.WORKFLOW_TRIGGER_USERNAME }}
          workflow_file_name: compatibility-check.yml
          client_payload: |
            {
              "sth-version": "${{ github.event.pull_request.head.sha }}"
            }
